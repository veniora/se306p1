/* Auto-generated by genmsg_cpp for file /home/ubuntu-11-10/se306p1/ros/stacks/Project2Sample/msg/Rotation.msg */
#ifndef PROJECT2SAMPLE_MESSAGE_ROTATION_H
#define PROJECT2SAMPLE_MESSAGE_ROTATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Project2Sample
{
template <class ContainerAllocator>
struct Rotation_ {
  typedef Rotation_<ContainerAllocator> Type;

  Rotation_()
  : R_ID(0)
  , oldx(0.0)
  , oldy(0.0)
  , newx(0.0)
  , newy(0.0)
  {
  }

  Rotation_(const ContainerAllocator& _alloc)
  : R_ID(0)
  , oldx(0.0)
  , oldy(0.0)
  , newx(0.0)
  , newy(0.0)
  {
  }

  typedef int64_t _R_ID_type;
  int64_t R_ID;

  typedef double _oldx_type;
  double oldx;

  typedef double _oldy_type;
  double oldy;

  typedef double _newx_type;
  double newx;

  typedef double _newy_type;
  double newy;


private:
  static const char* __s_getDataType_() { return "Project2Sample/Rotation"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "18977f85e8cc6df4b534dee960292b05"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 R_ID\n\
float64 oldx\n\
float64 oldy\n\
float64 newx\n\
float64 newy\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, R_ID);
    ros::serialization::serialize(stream, oldx);
    ros::serialization::serialize(stream, oldy);
    ros::serialization::serialize(stream, newx);
    ros::serialization::serialize(stream, newy);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, R_ID);
    ros::serialization::deserialize(stream, oldx);
    ros::serialization::deserialize(stream, oldy);
    ros::serialization::deserialize(stream, newx);
    ros::serialization::deserialize(stream, newy);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(R_ID);
    size += ros::serialization::serializationLength(oldx);
    size += ros::serialization::serializationLength(oldy);
    size += ros::serialization::serializationLength(newx);
    size += ros::serialization::serializationLength(newy);
    return size;
  }

  typedef boost::shared_ptr< ::Project2Sample::Rotation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Project2Sample::Rotation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Rotation
typedef  ::Project2Sample::Rotation_<std::allocator<void> > Rotation;

typedef boost::shared_ptr< ::Project2Sample::Rotation> RotationPtr;
typedef boost::shared_ptr< ::Project2Sample::Rotation const> RotationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Project2Sample::Rotation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Project2Sample::Rotation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Project2Sample

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::Rotation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::Rotation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Project2Sample::Rotation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "18977f85e8cc6df4b534dee960292b05";
  }

  static const char* value(const  ::Project2Sample::Rotation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x18977f85e8cc6df4ULL;
  static const uint64_t static_value2 = 0xb534dee960292b05ULL;
};

template<class ContainerAllocator>
struct DataType< ::Project2Sample::Rotation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Project2Sample/Rotation";
  }

  static const char* value(const  ::Project2Sample::Rotation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Project2Sample::Rotation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 R_ID\n\
float64 oldx\n\
float64 oldy\n\
float64 newx\n\
float64 newy\n\
\n\
";
  }

  static const char* value(const  ::Project2Sample::Rotation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Project2Sample::Rotation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Project2Sample::Rotation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.R_ID);
    stream.next(m.oldx);
    stream.next(m.oldy);
    stream.next(m.newx);
    stream.next(m.newy);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Rotation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Project2Sample::Rotation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Project2Sample::Rotation_<ContainerAllocator> & v) 
  {
    s << indent << "R_ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.R_ID);
    s << indent << "oldx: ";
    Printer<double>::stream(s, indent + "  ", v.oldx);
    s << indent << "oldy: ";
    Printer<double>::stream(s, indent + "  ", v.oldy);
    s << indent << "newx: ";
    Printer<double>::stream(s, indent + "  ", v.newx);
    s << indent << "newy: ";
    Printer<double>::stream(s, indent + "  ", v.newy);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PROJECT2SAMPLE_MESSAGE_ROTATION_H

