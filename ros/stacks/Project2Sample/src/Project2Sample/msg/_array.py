"""autogenerated by genmsg_py from array.msg. Do not edit."""
import roslib.message
import struct


class array(roslib.message.Message):
  _md5sum = "d86a00f7201b26b83e0dda505515fb21"
  _type = "Project2Sample/array"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64[6] ID
float64[6] X
float64[6] Y
float64[6] THETA

"""
  __slots__ = ['ID','X','Y','THETA']
  _slot_types = ['int64[6]','float64[6]','float64[6]','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       ID,X,Y,THETA
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(array, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = [0,0,0,0,0,0]
      if self.X is None:
        self.X = [0.,0.,0.,0.,0.,0.]
      if self.Y is None:
        self.Y = [0.,0.,0.,0.,0.,0.]
      if self.THETA is None:
        self.THETA = [0.,0.,0.,0.,0.,0.]
    else:
      self.ID = [0,0,0,0,0,0]
      self.X = [0.,0.,0.,0.,0.,0.]
      self.Y = [0.,0.,0.,0.,0.,0.]
      self.THETA = [0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_6q.pack(*self.ID))
      buff.write(_struct_6d.pack(*self.X))
      buff.write(_struct_6d.pack(*self.Y))
      buff.write(_struct_6d.pack(*self.THETA))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 48
      self.ID = _struct_6q.unpack(str[start:end])
      start = end
      end += 48
      self.X = _struct_6d.unpack(str[start:end])
      start = end
      end += 48
      self.Y = _struct_6d.unpack(str[start:end])
      start = end
      end += 48
      self.THETA = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(self.ID.tostring())
      buff.write(self.X.tostring())
      buff.write(self.Y.tostring())
      buff.write(self.THETA.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 48
      self.ID = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=6)
      start = end
      end += 48
      self.X = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.Y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.THETA = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6q = struct.Struct("<6q")
_struct_6d = struct.Struct("<6d")
