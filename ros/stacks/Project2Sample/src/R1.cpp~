#include "ros/ros.h"
#include "std_msgs/String.h"
#include <Project2Sample/R_ID.h>
#include <geometry_msgs/Twist.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>


#include <sstream>
#include "math.h"

/**
*This is a single robot in a robot swarm. The robot will be simulated on stage by sending messages
**/

//velocity of the robot
double linear_x;
double angular_z;

//pose of the robot
double px;
double py;
double theta;

//battery lives

int R0_life;
int R1_life;

//cluster head
int clusterHead;

void RobotNode1_callback(Project2Sample::R_ID msg)
{
	//Process messages received from R1
	R0_life = msg.life;
}


void StageOdom_callback(nav_msgs::Odometry msg)
{
	//This is the call back function to process odometry messages coming from Stage. 
	
	px = 10 + msg.pose.pose.position.x;
	py =20 + msg.pose.pose.position.y;
	ROS_INFO("Current x position is: %f", px);
	ROS_INFO("Current y position is: %f", py);
	
}


void StageLaser_callback(sensor_msgs::LaserScan msg)
{
	//This is the callback function to process laser scan messages
	//you can access the range data from msg.ranges[i]. i = sample number
	
}

int main(int argc, char **argv)
{

 //initialize robot parameters
	//Initial pose. This is same as the pose that you used in the world file to set	the robot pose.
	theta = M_PI/2.0;
	px = 10;
	py = 20;
	
	//Initial velocity
	linear_x = 0.2;
	angular_z = 0.2;
	
	//Batters life
	R0_life = -1;
	R1_life = 90;
	/*
	R0_life = 80;
	R1_life = -1;//value not yet updated
	R2_life = -1;
	R3_life = -1;
	R4_life = -1;
	clusterHead = -1;
	started = false;
	rotatingAway = false;
	stop = false;
	*/
	

//You must call ros::init() first of all. ros::init() function needs to see argc and argv. The third argument is the name of the node
ros::init(argc, argv, "RobotNode1");

//NodeHandle is the main access point to communicate with ros.
ros::NodeHandle n;

//advertise() function will tell ROS that you want to publish on a given topic_
//for other robots
ros::Publisher RobotNode_pub = n.advertise<Project2Sample::R_ID>("Robot1_msg",1000); 
//to stage
ros::Publisher RobotNode_stage_pub = n.advertise<geometry_msgs::Twist>("Robot1_vel",1000); 

//subscribe to listen to messages of other robots
ros::Subscriber RobotNode1_sub = n.subscribe<Project2Sample::R_ID>("Robot0_msg",1000, RobotNode1_callback);
/*
ros::Subscriber RobotNode2_sub = n.subscribe<chswarm::R_ID>("Robot2_msg",1000, RobotNode2_callback);
ros::Subscriber RobotNode3_sub = n.subscribe<chswarm::R_ID>("Robot3_msg",1000, RobotNode3_callback);
ros::Subscriber RobotNode4_sub = n.subscribe<chswarm::R_ID>("Robot4_msg",1000, RobotNode4_callback);
*/

//subscribe to listen to messages coming from stage
ros::Subscriber StageOdo_sub = n.subscribe<nav_msgs::Odometry>("Robot1_odo",1000, StageOdom_callback);
ros::Subscriber StageLaser_sub = n.subscribe<sensor_msgs::LaserScan>("Robot1_laser",1000,StageLaser_callback);
//ros::Subscriber StageTruth_sub = n.subscribe<nav_msgs::Odometry>("Robot0_truth",1000,StageTruth_callback);

ros::Rate loop_rate(10);

//a count of howmany messages we have sentP
int count = 0;

////messages
//velocity of this RobotNode
geometry_msgs::Twist RobotNode_cmdvel;
//message object to other robots
Project2Sample::R_ID msg;

while (ros::ok())
{
	
	//messages to stage
	RobotNode_cmdvel.linear.x = linear_x;
	RobotNode_cmdvel.angular.z = angular_z;
        //ROS_INFO("To stage vx: %f", RobotNode_cmdvel.linear.x);
        //ROS_INFO("To stage vy: %f", RobotNode_cmdvel.linear.y);

	//message to other robots
	msg.R_ID = 1;
	msg.life = R1_life;
	msg.x = px;
	msg.y = py;
	

	//display message on teminal (for debugging)
	//ROS_INFO("Robot ID: %i", msg.R_ID);
	//ROS_INFO("Robot Life: %i", msg.life);

	//publish the message
	RobotNode_pub.publish(msg);
	RobotNode_stage_pub.publish(RobotNode_cmdvel);
	
	//cluster head election
	//if((R0_life != -1) && (R1_life != -1) && (R2_life != -1) && (R3_life != -1) && (R4_life != -1))//if all life values are received
	if((R0_life != -1) && (R1_life != -1))//demo
	{
		int highest = R1_life;
		clusterHead = 1;
		if (R0_life > highest) {highest = R0_life; clusterHead = 0;};
		//if (R2_life > highest) {highest = R2_life; clusterHead = 2;};
		//if (R3_life > highest) {highest = R3_life; clusterHead = 3;};
		//if (R4_life > highest) {highest = R4_life; clusterHead = 4;};
		ROS_INFO("Cluster head is: %i", clusterHead);
		if (clusterHead == 0)//self
		{
			angular_z = 1.0;
		}

	}

	ros::spinOnce();

	loop_rate.sleep();
	++count;


}




return 0;

}
