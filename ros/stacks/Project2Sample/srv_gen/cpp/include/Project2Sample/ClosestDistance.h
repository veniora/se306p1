/* Auto-generated by genmsg_cpp for file /home/charu/se306p1/ros/stacks/Project2Sample/srv/ClosestDistance.srv */
#ifndef PROJECT2SAMPLE_SERVICE_CLOSESTDISTANCE_H
#define PROJECT2SAMPLE_SERVICE_CLOSESTDISTANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Project2Sample
{
template <class ContainerAllocator>
struct ClosestDistanceRequest_ {
  typedef ClosestDistanceRequest_<ContainerAllocator> Type;

  ClosestDistanceRequest_()
  : x_position(0.0)
  , y_position(0.0)
  {
  }

  ClosestDistanceRequest_(const ContainerAllocator& _alloc)
  : x_position(0.0)
  , y_position(0.0)
  {
  }

  typedef double _x_position_type;
  double x_position;

  typedef double _y_position_type;
  double y_position;


private:
  static const char* __s_getDataType_() { return "Project2Sample/ClosestDistanceRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0401f0798c1c6474d298dcf3412a3deb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a51d15d745b78ee74ccf7ca02ce5a2f1"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 x_position\n\
float64 y_position\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x_position);
    ros::serialization::serialize(stream, y_position);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x_position);
    ros::serialization::deserialize(stream, y_position);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x_position);
    size += ros::serialization::serializationLength(y_position);
    return size;
  }

  typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ClosestDistanceRequest
typedef  ::Project2Sample::ClosestDistanceRequest_<std::allocator<void> > ClosestDistanceRequest;

typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceRequest> ClosestDistanceRequestPtr;
typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceRequest const> ClosestDistanceRequestConstPtr;


template <class ContainerAllocator>
struct ClosestDistanceResponse_ {
  typedef ClosestDistanceResponse_<ContainerAllocator> Type;

  ClosestDistanceResponse_()
  : Robot_ID(0)
  {
  }

  ClosestDistanceResponse_(const ContainerAllocator& _alloc)
  : Robot_ID(0)
  {
  }

  typedef int64_t _Robot_ID_type;
  int64_t Robot_ID;


private:
  static const char* __s_getDataType_() { return "Project2Sample/ClosestDistanceResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "99abc9956cefa1cc611ed60850e967ab"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a51d15d745b78ee74ccf7ca02ce5a2f1"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 Robot_ID\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Robot_ID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Robot_ID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Robot_ID);
    return size;
  }

  typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ClosestDistanceResponse
typedef  ::Project2Sample::ClosestDistanceResponse_<std::allocator<void> > ClosestDistanceResponse;

typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceResponse> ClosestDistanceResponsePtr;
typedef boost::shared_ptr< ::Project2Sample::ClosestDistanceResponse const> ClosestDistanceResponseConstPtr;

struct ClosestDistance
{

typedef ClosestDistanceRequest Request;
typedef ClosestDistanceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ClosestDistance
} // namespace Project2Sample

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0401f0798c1c6474d298dcf3412a3deb";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0401f0798c1c6474ULL;
  static const uint64_t static_value2 = 0xd298dcf3412a3debULL;
};

template<class ContainerAllocator>
struct DataType< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Project2Sample/ClosestDistanceRequest";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x_position\n\
float64 y_position\n\
\n\
";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99abc9956cefa1cc611ed60850e967ab";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x99abc9956cefa1ccULL;
  static const uint64_t static_value2 = 0x611ed60850e967abULL;
};

template<class ContainerAllocator>
struct DataType< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Project2Sample/ClosestDistanceResponse";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 Robot_ID\n\
\n\
\n\
";
  }

  static const char* value(const  ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Project2Sample::ClosestDistanceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_position);
    stream.next(m.y_position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ClosestDistanceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Project2Sample::ClosestDistanceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Robot_ID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ClosestDistanceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Project2Sample::ClosestDistance> {
  static const char* value() 
  {
    return "a51d15d745b78ee74ccf7ca02ce5a2f1";
  }

  static const char* value(const Project2Sample::ClosestDistance&) { return value(); } 
};

template<>
struct DataType<Project2Sample::ClosestDistance> {
  static const char* value() 
  {
    return "Project2Sample/ClosestDistance";
  }

  static const char* value(const Project2Sample::ClosestDistance&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a51d15d745b78ee74ccf7ca02ce5a2f1";
  }

  static const char* value(const Project2Sample::ClosestDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Project2Sample::ClosestDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Project2Sample/ClosestDistance";
  }

  static const char* value(const Project2Sample::ClosestDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a51d15d745b78ee74ccf7ca02ce5a2f1";
  }

  static const char* value(const Project2Sample::ClosestDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Project2Sample::ClosestDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Project2Sample/ClosestDistance";
  }

  static const char* value(const Project2Sample::ClosestDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PROJECT2SAMPLE_SERVICE_CLOSESTDISTANCE_H

